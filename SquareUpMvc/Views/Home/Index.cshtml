@{
    ViewData["Title"] = "Square Payment Demo";
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">Square Payment Demo</h3>
                </div>
                <div class="card-body">
                    <form id="payment-form">
                        <div class="mb-3">
                            <label for="email" class="form-label">Email Address</label>
                            <input type="email" id="email" class="form-control" required>
                        </div>
                        <div class="mb-3">
                            <label for="card-container" class="form-label">Card Information</label>
                            <div id="card-container" class="form-control" style="height: 60px;"></div>
                        </div>
                        <div class="mb-3">
                            <label for="amount" class="form-label">Amount (GBP)</label>
                            <input type="number" id="amount" class="form-control" value="10.00" step="0.01" min="0.01">
                        </div>
                        <button id="card-button" type="button" class="btn btn-primary w-100">
                            <span id="button-text">Pay $10.00</span>
                            <span id="button-loading" style="display: none;">
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                Processing...
                            </span>
                        </button>
                    </form>

                    <div id="payment-status-container" class="mt-3"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://sandbox.web.squarecdn.com/v1/square.js"></script>
    <script>
        // Square configuration
        const appId = 'sandbox-sq0idb-FkhM6-kcHC51wD2rrcRqNA';
        const locationId = 'L2AJ5F56DH0MD';

        let payments;
        let card;
        let cardButton;
        let amountInput;
        let emailInput;

        // Initialize the payment form
        async function initializePaymentForm() {
            try {
                // Initialize Square Payments
                payments = window.Square.payments(appId, locationId);

                // Create and attach the card
                card = await payments.card();
                await card.attach('#card-container');

                // Get DOM elements
                cardButton = document.getElementById('card-button');
                amountInput = document.getElementById('amount');
                emailInput = document.getElementById('email');

                // Add event listeners
                cardButton.addEventListener('click', handlePayment);
                amountInput.addEventListener('input', updateButtonText);

                // Initial button text
                updateButtonText();

                console.log('Payment form initialized successfully');

            } catch (error) {
                console.error('Failed to initialize payment form:', error);
                showError('Failed to initialize payment form. Please refresh the page.');
            }
        }

        // Update button text based on amount
        function updateButtonText() {
            const amount = parseFloat(amountInput.value) || 0;
            document.getElementById('button-text').textContent = `Pay $${amount.toFixed(2)}`;
        }

        // Handle payment button click
        async function handlePayment() {
            if (!card) {
                showError('Card component not initialized');
                return;
            }

            const amount = parseFloat(amountInput.value);
            if (!amount || amount <= 0) {
                showError('Please enter a valid amount');
                return;
            }
            const email = emailInput.value.trim();
            if (!email) {
                showError('Please enter your email address');
                return;
            }

            // Show loading state
            setLoadingState(true);
            clearMessages();

            try {
                // Tokenize the card
                const tokenResult = await card.tokenize();

                if (tokenResult.status === 'OK') {
                    // Process payment on server
                    await processPayment(tokenResult.token, amount, email);
                } else {
                    throw new Error(`Tokenization failed: ${tokenResult.status}`);
                }

            } catch (error) {
                console.error('Payment error:', error);
                showError(error.message || 'Payment failed. Please try again.');
            } finally {
                setLoadingState(false);
            }
        }

        // Process payment on server
        async function processPayment(token, amount, email) {
            const requestBody = {
                sourceId: token,
                amount: Math.round(amount * 100), // Convert to cents
                currency: 'GBP',
                email: email
            };

            const response = await fetch('/api/payment/process', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody)
            });

            const result = await response.json();

            if (response.ok && result.status === 'Success') {
                showSuccess(`Payment successful! Payment ID: ${result.paymentId}`);
            } else {
                throw new Error(result.message || 'Payment processing failed');
            }
        }

        // Show success message
        function showSuccess(message) {
            const container = document.getElementById('payment-status-container');
            container.innerHTML = `
                <div class="alert alert-success" role="alert">
                    <i class="fas fa-check-circle"></i> ${message}
                </div>
            `;
        }

        // Show error message
        function showError(message) {
            const container = document.getElementById('payment-status-container');
            container.innerHTML = `
                <div class="alert alert-danger" role="alert">
                    <i class="fas fa-exclamation-circle"></i> ${message}
                </div>
            `;
        }

        // Clear messages
        function clearMessages() {
            document.getElementById('payment-status-container').innerHTML = '';
        }

        // Set loading state
        function setLoadingState(loading) {
            const buttonText = document.getElementById('button-text');
            const buttonLoading = document.getElementById('button-loading');
            const button = document.getElementById('card-button');

            if (loading) {
                buttonText.style.display = 'none';
                buttonLoading.style.display = 'inline';
                button.disabled = true;
            } else {
                buttonText.style.display = 'inline';
                buttonLoading.style.display = 'none';
                button.disabled = false;
            }
        }

        // Initialize when DOM is ready
        document.addEventListener('DOMContentLoaded', initializePaymentForm);
    </script>
}